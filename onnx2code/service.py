from pathlib import Path
from typing import Any
from subprocess import call
import tempfile
import numpy.typing as npt

from .output import Output


class ModelService:
    """
    Allows using a model generated by onnx2code in a convenient way

    Used for testing and evaluation
    """

    def __init__(self, output: Output):
        self.output = output

    def __enter__(self) -> "ModelService":
        """
        Compiles the model and starts a subprocess
        """
        self.temp_dir = tempfile.TemporaryDirectory()

        self.__compile()
        self.__boot()

        return self

    def __compile(self) -> None:
        temp_dir = Path(self.temp_dir.name)

        cpp_file = temp_dir / "model.cpp"
        hpp_file = temp_dir / "model.hpp"
        asm_file = temp_dir / "model.asm"

        asm_object = temp_dir / "model-asm.o"
        self.service_path = temp_dir / "service"

        # TODO: sponja
        with open(cpp_file, "w") as f:
            f.write(self.output.source_cpp)
        with open(hpp_file, "w") as f:
            f.write(self.output.source_hpp)
        with open(asm_file, "w") as f:
            f.write(self.output.source_asm)

        compile_asm_cmd = [
            "nasm",
            "-f",
            "elf64",
            str(asm_file),
            "-o",
            str(asm_object),
            "-g",
        ]
        compile_svc_cmd = [
            "gcc",
            "-m64",  # 64 bit env
            str(asm_object),
            str(hpp_file),
            str(cpp_file),
            # TODO: service cpp (will not compile right now)
            "-o",
            str(self.service_path),
            "-O0",
            "-g",
            "-fsanitize=address",
        ]

        # TODO: hacer una funcion que corra el comando y parse el output
        #       si falla poner el output en la Exception
        #       y todo el resto del output tirarlo (warning etc) asi no poluciona
        if call(compile_asm_cmd) != 0:
            raise Exception("failure compiling asm")
        if call(compile_svc_cmd) != 0:
            raise Exception("failure compiling service")

        pass

    def __boot(self) -> None:
        pass

    def inference(self, inputs: list[npt.NDArray]) -> list[npt.NDArray]:
        # TODO: pasar por pipes los inputs y outputs
        return []

    def __exit__(self, _1: Any, _2: Any, _3: Any) -> None:
        self.temp_dir.cleanup()
        pass
